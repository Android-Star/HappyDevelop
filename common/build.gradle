allprojects {
  repositories {
    google()
    jcenter()
  }
}
buildscript {
  repositories {
    jcenter()
    maven {
      url "https://maven.google.com"
    }
  }
  dependencies {
    classpath rootProject.ext.androidPlugin
  }
}

apply plugin: 'com.android.library'

version = "0.1.2153"

android {
  compileSdkVersion rootProject.ext.compileSdkVersion
  buildToolsVersion rootProject.ext.buildToolsVersion
  defaultConfig {
    minSdkVersion rootProject.ext.minSdkVersion
    targetSdkVersion rootProject.ext.targetSdkVersion
    multiDexEnabled true
  }
  lintOptions {
    abortOnError false
  }
  compileOptions {
    sourceCompatibility rootProject.ext.sourceCompatibilityVersion
    targetCompatibility rootProject.ext.sourceCompatibilityVersion
  }

  lintOptions {
    abortOnError false
    checkAllWarnings true
    showAll true
  }

  packagingOptions {
    exclude 'META-INF/DEPENDENCIES'
    exclude 'META-INF/LICENSE'
    exclude 'META-INF/LICENSE.txt'
    exclude 'META-INF/NOTICE'
    exclude 'META-INF/NOTICE.txt'
  }

  sourceSets {
    main {
      jniLibs.srcDir 'libs'
    }
  }

  repositories {
    flatDir {
      dirs 'libs' //this way we can find the .aar file in libs folder
    }
  }
}

dependencies {
  api fileTree(include: '*.jar', dir: 'libs')
  api 'com.squareup.okhttp3:okhttp:3.9.0'
  api 'com.google.code.gson:gson:2.8.0'
  api 'com.android.support:multidex:1.0.3'
  api 'com.google.android.exoplayer:exoplayer:2.8.1'
  api 'com.google.android.exoplayer:extension-okhttp:2.8.1'
  api 'com.google.zxing:core:3.3.0'
  api 'org.litepal.android:core:2.0.0'
  implementation group: 'org.eclipse.paho', name: 'org.eclipse.paho.client.mqttv3', version: '1.2.1'
  implementation 'com.android.support:support-annotations:27.0.0'
}

task sourcesJar(type: Jar) {
  from android.sourceSets.main.java.srcDirs
  classifier = 'sources'
}

task javadoc(type: Javadoc) {
  source = android.sourceSets.main.java.srcDirs
  classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

artifacts {
  archives javadocJar
  archives sourcesJar
}

